name: Release watchtower

on:
  push:
  schedule:
    - cron: '0 3 * * *'

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.latest.outputs.ver }}
      need_build: ${{ (steps.check.outputs.exists == 'false') && startsWith(steps.latest.outputs.ver, '2.') }}
    steps:
      - name: Get latest tag
        id: latest
        run: |
          VERSION=$(
            curl -sL 'https://api.github.com/repos/aws/aws-cli/git/refs/tags' |
            jq -r '.[-1].ref' |
            grep -Eo '[0-9]+.[0-9]+.[0-9]+')
          echo "ver=${VERSION}" >> "$GITHUB_OUTPUT"
      - name: Check if the tag already exists
        uses: mukunku/tag-exists-action@v1.5.0
        id: check
        with:
          tag: v${{ steps.latest.outputs.ver }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  prepare:
    runs-on: ubuntu-latest
    needs: [check]
    if: needs.check.outputs.need_build == 'true'
    outputs:
      version: ${{ needs.check.outputs.version }}
      upload_url: ${{ steps.new_release.outputs.upload_url }}
    steps:
      - name: Publish new release
        id: new_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check.outputs.version }}
          release_name: v${{ needs.check.outputs.version }}
          body: |
            This build is automated via GitHub Actions.
            If you find any errors, please open an issue and let me know.

            > Outputs will be available later because we're building AppImage sequentially by arch after publishing the release.
          draft: false
          prerelease: false

  build:
    runs-on: ubuntu-latest
    needs: [prepare]
    strategy:
      fail-fast: false
      matrix:
        arch: ['x86_64', 'aarch64']
    steps:
      - uses: actions/checkout@v4
      - id: x
        run: |
          sudo apt-get install fuse -y --no-install-recommends
          ./build '${{ needs.prepare.outputs.version }}' '${{ matrix.arch }}'
          echo 'name=aws-${{ matrix.arch }}.AppImage' >> "$GITHUB_OUTPUT"
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare.outputs.upload_url }}
          asset_path: ./${{ steps.x.outputs.name }}
          asset_name: ${{ steps.x.outputs.name }}
          asset_content_type: application/zip
